# -*- org-todo-keyword-faces: (("DOING" . "orange")) -*-
#+TODO: TODO(t) DOING(i) | DONE(d)

There are a *lot* of things to do to make c-xref into modern C.

(This file is structured for Emacs org-mode...)

* DOING Remove bootstrap step (strfill and local definitions)
** DOING Remove all FILL_xxx macros by using compound initialisers
At this point there are 66, 65, 64, 63, 62 FILL-macros that are in use
*** TODO Remove chReference from proto.h
*** TODO Rename classh to hierarchy
*** TODO Remove cachePoint from proto.h
*** TODO Remove editorBuffer from proto.h
*** DONE Remove caching from proto.h
*** DONE Remove fileItem from proto.h
*** DONE Remove FILL_intlist
**** DONE Replace FILL_intList so we can remove strFill-dependency from classh.c
**** DONE Move intlist from proto.h to html.h
*** TODO Remove position from proto.h
*** TODO Remove FILL_editor* from strFill
**** TODO Remove FILL_editorBuffer from strFill
***** TODO Move editorBuffer from proto.h to editor.h
*** DONE Remove FILL_symbol()
***** DONE Remove #include "symbol" from proto.h
***** DONE semact.c requires FILL_symbolBits which are not strFill'ed
if symbol.h is not in proto.h. We need to create fillSymbolBits()
***** DONE Replace 0 with ACC_DEFAULT in calls to fillSymbolBits()
****** DONE symtab.h: unknown type name Symbol: include symbol instead of proto
******* DONE hashlist.th bool
***** DONE Replace all FILL_symbol() calls
***** DONE Move Symbol struct to Symbol-module
***** DONE Create a Symbol module with newSymbolxxx() & fillSymbolxxx()
The call pattern XX_ALLOC... FILL_symbolBits ... FILL_symbol is
prominent. And if we remove all instances where a newSymbol() function
returning a pointer would work that's a big step. Started on the
"remove-fill-symbol" branch. There is still an issue in that the
FILL_symbol macro takes one argument which is the name of the union
field that the next argument should assign to (is this a general
pattern for FILL-generation? Probably) Suggested solution is one
newSymbol<field>() for each of the necessary fields that are actually used.
*** TODO Move all structs that are used for FILL_xxx to a separate file
In this way we can generate only those that are actually used and
attack those one by one, maybe?
*** DONE Remove FILL_symbollist() macro
** TODO Remove generation of str_fill from build
** TODO Remove code for generation of str_fill
* DOING Start using log.c functions to log to a separate log file
* TODO Refactor int2StringTabs, should not have Init in them
* TODO Handle struct literals ("(type){.field = data, ...}")
* TODO Investigate to remove S_classTreeData
* TODO Cannot mock structs as arguments like in symbol.mock
We need to change pos to *pos if that's gonna work
* TODO Fix tests/olcx_refactor_rename gets "buf is not valid"
* TODO Rename reftab.[ch] to cxreftab.[ch]? Or s_cxreftab to s_reftab?
* TODO Clean up documentation, primarily remove 'create_distribution'
* TODO Document that the "distribution" method is unsupported
* TODO Move XX_ALLOCC and friends to "memory" module
* TODO Ensure each header file is not dependent on the fact that some other
header file is included before it. (Could this be done by taking each
header file and try to compile it in isolation? It should include
whatever other things it needs...)

* TODO Ensure every file only includes what it needs so that dependencies
are a small as possible. This is why IWYU exists!! It means "Include
What You Use" and is a Clang related project at
https://github.com/include-what-you-use/include-what-you-use)

* TODO Rather than "fprintf(dumpOut...". Adjust options so that we can better
control logging for various modules(?)

** DONE Include and start using log()

** TODO Move output from log() from dumpOut to some logFile
* TODO Ensure all ANSI-C, C99 and C11 keywords (and macros for them?) are
  recognized (list e.g. at
  http://www.c-programming-simple-steps.com/c-keywords.html)

* TODO Memory allocation is home grown, probably out of necessity. Refactor
  to a state where it can be replaced (at least as an experiment) by
  the memory allocation of current run-times. I can't see that even
  32-bit memory restrictions (2 GB) should be a problem. The caching
  might be tied into this, though.

* TODO Naming. Generally it is heavy on short, write-only naming, we should
move towards full names as much as possible

** TODO Remove S_, s_ and other naming conventions
** TODO Use actual typedef names where ever possible
* TODO Macros. There are many things that might need the magic of macros, but we
should watch out for "macro for optimisation" and remove that.

* TODO Header files. There are a number of sections in the proto.h that
  indicates which file/module it declares an externa interface for. We
  should move that to a <module>.h file instead. Just watchout for
  datatypes that need to be in proto.h because of the strFill et. al
  generation. Not all does, though...

* TODO Modules. Better use of modules (Clean Code/Architecture)
The hash tables and lists are such candidates. If we do that it would be much
easier to mock and unit test other modules.
** TODO Extract PPC-functions from misc.c into a ppc-module
** DONE Extract charbuf module
* TODO Change structure declarations in proto.h into ideomatic struct
  {struct} typedefs instead of using typenames generated into the
  strTdef file. See NOTES.md. Few examples of strategy is implemented
  with cctNode and position. Primary benefit is to be able to use
  renaming on them...

* TODO Make Makefile.common look for our patched yacc and if it's not
  available ignore yacc-rules otherwise always run yacc.

* TODO enumTxt.c is a generated set of strings for the enum values in
  proto.h, but the extern declarations of them are in strTdef.g. A
  cleaner way would be to generate them into an "enumTxt.h" (or a
  better name, such as 'generated_enum_strings.h').
  ACTUALLY: split generation of enumTxt header to its own header file
  with the naming strategy as for the others.

* DONE Move all function prototypes from proto.h to <module>.h
* DONE Make fillSymbol() and newSymbol() set default symbolBits
then we only need to set non-default values (which could be done
using setType(), setStorage() and so on, functions
* DONE Remove FILLF_fileItem() by replacing it with fillFileItem()
** DONE Make hashTabAdd() return int rather than *int out arg
*** DONE Make IsMember() return position rather than out argument
**** DONE Replace fileTabIsMember() with fileTabExists()/fileTabLookup()
**** DONE Implement fileTabLookup()
*** DONE Make addFileTabItem return the position rather than out arg
**** DONE Cover jarFileParse() with test
* DONE Create a map of how structs are dependent on each other
* DONE Add an -exit option so that clients can take down server cleanly
* DONE Ensure only externally used functions are visible in the modules
header file. And that only those are "non-static" in the C file.
* DONE Make edit_server_driver read output from pipespy
Idea is to be able to record interactions and then re-play them
with the driver.
* DONE Build a protocol spy that can be put between the editor and the
server to inspect and learn about the communication. It should be
fairly easy, just start up like c-xref does, start the real c-xref
with the startup arguments. Shuffle all communication on to the other
while logging the messages to a file.

* DONE Although generation of typedef's etc. in strTdef et al might be
  questioned we need to handle that for now, but at least let's add
  #ifndef guards so that any file that requires a typedef can include
  them without need to consider the order of the included
  files. (Until we get into a dependency loop...)

* DONE Change naming strategy for the bootstrap and generated
  files. "*.bs.h" is now a bootstrap file, while *.g.h" is the local
  generated one using the boostrap version of c-xref. Also a single
  header file for each of the generated files is now taking care of
  the BOOTSTRAPPING ifdef and include the correct bootstrap or
  generated file.

* DONE Unit tests. There are now some simple ones. We need to get some working as
  quickly as possible. Meanwhile there are some functional level tests
  in ../tests, but as all integrating tests with I/O they are quite
  slow. (And some only work on huge data, because that was the test
  case given for some issues, and I really want to have a test case
  for each issue before fixing it, if possible.)

* DONE Make yacc parsing allowed the default. Change Makefile.common so
  that YACCALLOWED is reversed, i.e. if you *don't* want yacc parsing
  in the build c-xref set EXCLUDE_YACC_PARSING (or something similar)
  ACTUALLY: removed conditionals around that code, and kept the CCC
  conditionals.

* DONE Refactor out the hashtables and lists to separate modules.
* DONE Fix byacc skeleton to "goto <non-used label>" by remove ifdef around "lint"
