There are a *lot* of things to do to make c-xref into modern C.

Concrete things in progress:

* Move all function prototypes from proto.h to <module>.h

Concrete things todo:

* Make yacc parsing allowed the default. Change Makefile.common so
  that YACCALLOWED is reversed, i.e. if you *don't* want yacc parsing
  in the build c-xref set EXCLUDE_YACC_PARSING (or something similar)

* Make Makefile.common look for our patched yacc and if it's not
  available ignore yacc-rules otherwise always run yacc.

* Ensure only externally used functions are visible in the modules
  header file. And that only those are "non-static" in the C file.

* Ensure each header file is not dependent on the fact that some other
  header file is included before it. (Could this be done by taking
  each header file and try to compile it in isolation? It should
  include whatever other things it needs...)

* Refactor out the hashtables and lists to separate modules.

* Although generation of typedef's etc. in strTdef et al might be
  questioned we need to handle that for now, but at least let's add
  #ifndef guards so that any file that requires a typedef can include
  them without need to consider the order of the included
  files. (Until we get into a dependency loop...)

* Ensure all ANSI-C, C99 and C11 keywords (and macros for them?) are
  recognized (list e.g. at
  http://www.c-programming-simple-steps.com/c-keywords.html)

* enumTxt.c is a generated set of strings for the enum values in
  proto.h, but the extern declarations of them are in strTdef.g. A
  cleaner way would be to generate them into an "enumTxt.h" (or a
  better name, such as 'generated_enum_strings.h').

* Memory allocation is home grown, probably out of necessity. Refactor
  to a state where it can be replaced (at least as an experiment) by
  the memory allocation of current run-times. I can't see that even
  32-bit memory restrictions (2 GB) should be a problem.

General improvements:

* Naming. Generally it is heavy on short, write-only naming, we should
  move towards full names as much as possible.

* Macros. There are many things that need the magic of macros, but we
  should watch out for "macro for optimisation" and remove that.

* Header files. There are a number of sections in the proto.h that
  indicates which file/module it declares an externa interface for. We
  should move that to a <module>.h file instead. Just watchout for
  datatypes that need to be in proto.h because of the strFill et. al
  generation.

* Modules. Some things might really belong in separate modules, at
  first glance at least, the hash tables and lists are such
  candidates. If we do that it would be much easier to mock and unit
  test other modules.

* Unit tests. There are none. Period. We need to get some working as
  quickly as possible. Meanwhile there are some functional level tests
  in ../tests, but as all integrating tests with I/O they are quite
  slow. (And some only work on huge data, because that was the test
  case given for some issues, and I really want to have a test case
  for each issue before fixing it, if possible.)

Done:
