#
# This makefile is included by Makefile and Makefile.platform makefiles.
# Do not use it directly
#
# NOTE that some files are generated by a bootstrap version of
# c-xref. If they need to be re-generated and c-xref.bs does not exist then
# c-xref.bs is built from existing sources using Makefile.bs.
#
# In particular strFill.g and enumTxt.g/enumTxt.g.c are generated to
# catch what's relevant for this machine. Bootstrap versions of them,
# strFill.bs and enumTxt.bs/enumTxt.bs.c should be used when bootstraping, so those
# files should be usable on all platforms.
#

all: CFLAGS+=-DDEBUG
all prod: $(ZLIB) c-xref

include sources.mk

$(OBJDIR)/%.o: %.c | $(OBJDIR)
	$(CC) $(CFLAGS) $(OUTPUT_OPTION) -MMD -c $<

#########################################################################

..always..:;

$(ROOTDIR)/lib/zlib/libz.a: ..always..
	make -C $(ROOTDIR)/lib/zlib libz.a

# Unless we need to modify the grammar, which incidentally includes
# both java and c++, we can use the already included .c-files instead
# of generating from yacc

c_parser.tab.c c_parser.tab.h: c_parser.y $(YACC)
	$(YACC) -v -d -b c_parser c_parser.y

java_parser.tab.c java_parser.tab.h: java_parser.y $(YACC)
	$(YACC) -v -d -b java_parser java_parser.y

yacc_parser.tab.c yacc_parser.tab.h: yacc_parser.y $(YACC)
	$(YACC) -v -d -b yacc_parser yacc_parser.y

cexp_parser.tab.c cexp_parser.tab.h: cexp_parser.y $(YACC)
	$(YACC) -v -d -b cexp_parser cexp_parser.y


#########################################################################
# Bootstrap a c-xref.bs using globally working sources
#
c-xref.bs:
	@echo "BOOTSTRAPPING..."
	make ROOTDIR=$(ROOTDIR) -f Makefile.bs


#########################################################################
# Once we have bootstrapped a c-xref.bs it can generate definitions
# which are dependent on compiler builtins or standard headers for
# the current environment.
#
# .g = generated, .bs = bootstrap version
#
# They might possibly be dependent on any header file so make that all,
# we are planning on removing this at some point anyway.

compiler_defines.g.h: c-xref.bs Makefile.common
	@echo | gcc -dM -E - > tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		else \
			echo "$@: no change." ; \
			rm tmp-$@ ; \
		fi \
	else \
			echo "$@: generated." ; \
			mv -f tmp-$@ $@ ; \
	fi

# Create a dependency file for proto.h since we need to know which files it includes
$(OBJDIR)/proto.d: proto.h $(OBJDIR)
	$(CC) $(CFLAGS) -MMD -MT proto.h -MF /tmp/proto.d -c proto.h -o /dev/null
	sed 's/ proto.h / /' /tmp/proto.d > $@

# Generate structure filler functions
strFill.g.h: proto.h compiler_defines.g.h c-xref.bs .c-xrefrc Makefile.common
	@./c-xref.bs -task_regime_generate $(CXREF_CFLAGS) -DGENERATION \
		-str_fill -header -xrefrc .c-xrefrc proto.h \
		> tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: generated." ; \
		else \
			echo "$@: no change." ; \
			rm tmp-$@ ; \
		fi \
	else \
			echo "$@: generated." ; \
			mv -f tmp-$@ $@ ; \
	fi

# Generate enum string representations header file
enumTxt.g.h: proto.h compiler_defines.g.h c-xref.bs .c-xrefrc Makefile.common
	@./c-xref.bs -task_regime_generate $(CXREF_CFLAGS) -DGENERATION \
		-enum_name -header -xrefrc .c-xrefrc proto.h \
		> tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		else \
			echo "$@: no change." ; \
			rm tmp-$@ ; \
		fi \
	else \
			echo "$@: generated." ; \
			mv -f tmp-$@ $@ ; \
	fi

# Generate enum string representations
enumTxt.g.c: proto.h compiler_defines.g.h .c-xrefrc c-xref.bs Makefile.common
	@./c-xref.bs -task_regime_generate $(CXREF_CFLAGS) -DGENERATION \
		-enum_name -body -xrefrc .c-xrefrc proto.h \
		> tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		else \
			echo "$@: no change." ; \
			rm tmp-$@ ; \
		fi \
	else \
			echo "$@: generated." ; \
			mv -f tmp-$@ $@ ; \
	fi

c-xref: .c-xrefrc $(OBJS)
	$(CC) $(LDFLAGS) -o c-xref $(OBJS) $(LIBS)

.c-xrefrc: c-xrefrc.tpl
	@sed -e "s+CURDIR+$(CURDIR)+g" c-xrefrc.tpl > .c-xrefrc

#########################################################################

clean:;
	-make -C $(ROOTDIR)/lib/zlib clean
	-make -C unittests clean
	-rm -rf $(OBJDIR)/*.o $(OBJDIR)/*.gc* c-xref

cleaner: clean
	-rm -rf $(OBJDIR) compiler_defines.g.h strFill.g.h enumTxt.g.[ch] c-xref.bs .c-xrefrc
	-make -C unittests cleaner

########################################################################
test: c-xref
	@echo "Only running quick tests for now - 'cd ..; make test' to run all"
	$(MAKE) -C ../tests quick


unit:
	make COVERAGE="$(COVERAGE)" -C unittests

coverage: COVERAGE=--coverage
coverage: clean all test
	lcov -d . -c -o coverage.info
	genhtml -o coverage coverage.info

# Special dependecies to force rebuild of c-xref.bs to generate needed files
$(SRCS) : strFill.g.h enumTxt.g.h enumTxt.g.c
