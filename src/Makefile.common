#
# This makefile is included by Makefile and Makefile.platform makefiles.
# Do not use it directly
#
# NOTE that some files are generated by a bootstrap version of
# c-xref. If they need to be re-generated and c-xref.bs does not exist then
# c-xref.bs is built from existing sources using Makefile.bs.
#
# In particular  enumTxt.g/enumTxt.g.c are generated from the current
# sources to get FILL-functions that match current versions of the structures.

# Bootstrap versions of enumTxt.bs/enumTxt.bs.c should be used when
# bootstraping, so those files should be usable on all platforms. Take
# care to ensure that they work by doing
#
#    make bs; make cleaner; make
#
# That should copy the working versions to the bootstrap versions and
# force a bootstrap build. If that doesn't work you must either
# manually fix the .bs. versions, or back up to a commit in which it
# worked and try from there.

debug: CFLAGS+=-DDEBUG
debug: COVERAGE=--coverage
yydebug: CFLAGS+=-DYYDEBUG=1 -DDEBUG

CFLAGS+=-DYYDEBUG=0

prod debug yydebug: $(ZLIB) c-xref

include sources.mk

$(OBJDIR)/%.o: %.c | $(OBJDIR)
	$(CC) $(CFLAGS) $(OUTPUT_OPTION) -MMD -MP -c $<

#########################################################################

..always..:;

$(ROOTDIR)/lib/zlib/libz.a: ..always..
	make -C $(ROOTDIR)/lib/zlib libz.a

# We generate parsers for C, Yacc, Java and C expressions
# Note the file prefix (-b) and symbol prefix (-p)

c_parser.tab.c c_parser.tab.h: c_parser.y $(YACC)
	$(YACC) -v -d -b c_parser -p cyy c_parser.y

java_parser.tab.c: java_parser.y $(YACC)
	$(YACC) -v -b java_parser -p javayy java_parser.y

yacc_parser.tab.c: yacc_parser.y $(YACC)
	$(YACC) -v -b yacc_parser -p yaccyy yacc_parser.y

cexp_parser.tab.c: cexp_parser.y $(YACC)
	$(YACC) -v -b cexp_parser -p cexpyy cexp_parser.y


#########################################################################
# Bootstrap a c-xref.bs using globally working sources
#
c-xref.bs:
	@echo "BOOTSTRAPPING..."
	make ROOTDIR=$(ROOTDIR) -f Makefile.bs

# Copy all generated headers to .bs. so that compiling from scratch will work
bs: enumTxt.g.h enumTxt.g.c
	cp enumTxt.g.h enumTxt.bs.h
	cp enumTxt.g.c enumTxt.bs.c

#########################################################################
# Once we have bootstrapped a c-xref.bs it can generate definitions
# which are dependent on compiler builtins or standard headers for
# the current environment.
#
# .g = generated, .bs = bootstrap version
#

# Generate enum string representations header file
enumTxt.g.h: proto.h c-xref.bs .c-xrefrc Makefile.common
	@./c-xref.bs -task_regime_generate $(CXREF_CFLAGS) \
		-enum_name -header -xrefrc .c-xrefrc proto.h \
		> tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		else \
			echo "$@: no change." ; \
			rm tmp-$@ ; \
		fi \
	else \
			echo "$@: generated." ; \
			mv -f tmp-$@ $@ ; \
	fi

# Generate enum string representations
enumTxt.g.c: proto.h .c-xrefrc c-xref.bs Makefile.common
	@./c-xref.bs -task_regime_generate $(CXREF_CFLAGS) \
		-enum_name -body -xrefrc .c-xrefrc proto.h \
		> tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		else \
			echo "$@: no change." ; \
			rm tmp-$@ ; \
		fi \
	else \
			echo "$@: generated." ; \
			mv -f tmp-$@ $@ ; \
	fi

enumTxt.o: enumTxt.g.c enumTxt.g.h

c-xref: .c-xrefrc $(OBJS) enumTxt.o
	$(CC) $(LDFLAGS) -o c-xref $(OBJS) $(LIBS)

.c-xrefrc: c-xrefrc.tpl
	@sed -e "s+CURDIR+$(CURDIR)+g" c-xrefrc.tpl > .c-xrefrc

#########################################################################

clean:;
	-make -C $(ROOTDIR)/lib/zlib clean
	-make -C unittests clean
	-rm -rf $(OBJDIR) c-xref
	-make -C ../tests clean

cleaner: clean
	-rm -rf $(OBJDIR) enumTxt.g.[ch] c-xref.bs .c-xrefrc
	-make -C unittests cleaner

########################################################################
test: debug
	@echo "Only running quick tests for now - 'cd ../test; make all' to run all"
	$(MAKE) -C ../tests -j quick


unit: enumTxt.[ch]
	make -C unittests debug

coverage: COVERAGE=--coverage
coverage: clean test
	lcov -q --exclude \*.mock -d . -c -o total.coverage
	genhtml -q -o ../coverage total.coverage

coverage-report: unit test
	@echo Doing the coverage reporting in the background
	@$(MAKE) the-actual-coverage-report &

LCOV=lcov -q --exclude '*.mock' --exclude '*.tab.c' --exclude '/usr/*'
the-actual-coverage-report:
	@$(LCOV) -d . -c -t unittests -o ../coverage/total.coverage
	@ls -1q ../tests/*.coverage | sed "s/^/-a /g" | xargs $(LCOV) -o ../coverage/total.coverage
	@printf "\\r"
	genhtml -q -o ../coverage ../coverage/total.coverage


# Special dependecies to force rebuild of c-xref.bs to generate needed files
$(SRCS) : enumTxt.g.h enumTxt.g.c
