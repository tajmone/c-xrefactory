#
# This makefile is included by Makefile and Makefile.platform makefiles.
# Do not use it directly
#
# NOTE that the strXXX.h files are generated by a bootstrap version of
# c-xref. If they need to be re-generated and c-xref.bs does not exist then
# c-xref.bs is built from existing sources using Makefile.bs.

OBJS=cgram.o main.o globals.o misc.o semact.o commons.o generate.o \
	 enumTxt.o complete.o cxref.o cxfile.o lex.o yylex.o cexp.o options.o \
	 caching.o javagram.o jsemact.o cfread.o cct.o init.o \
	 editor.o refactory.o \
	 yaccgram.o html.o extract.o classh.o jslsemact.o \
	 $(ZLIB_LIB)

# put following into comments if you wish to build without zlib library,
# i.e. without possibility to read compressed .jar files
ZLIB_OPT=-DUSE_LIBZ
ZLIB_LIB=$(ROOTDIR)/lib/zlib/libz.a


#
SRC=$(ROOTDIR)/src
INCLUDES=-I$(ROOTDIR)/src -I$(ROOTDIR)/lib/zlib -I.

#########################################################################

all: $(ROOTDIR)/lib/zlib/libz.a c-xref

..always..:;

#supposing to not modify zlib
$(ROOTDIR)/lib/zlib/libz.a: ..always..
	make -C $(ROOTDIR)/lib/zlib libz.a

# Unless we need to modify the grammar, which incidentally includes
# both java and c++, we can use the already included .c-files instead
# of generating from yacc

# So we disable standard yacc to C rule so that we can compile without
# YACC which should happen on user sites. To run yacc on .y-files use
# 'make yacc' as defined in Makefile
%.c : %.y

cgram.c: cgram.y
ifeq ($(YACCING),yes)
	$(YACC) -v -d cgram.y
	mv y.output cy.output
	sed 's/y.tab.c/cgram.c/g' y.tab.c > cgram.c
	mv y.tab.h cgram.h
endif


javagram.c: javagram.y cgram.c
ifeq ($(YACCING),yes)
	$(YACC) -v -d javagram.y
	mv y.output jy.output
	sed 's/y.tab.c/javagram.c/g' y.tab.c > javagram.c
	mv y.tab.h javagram.h
	diff javagram.h cgram.h
endif

yaccgram.c: yaccgram.y cgram.c
ifeq ($(YACCING),yes)
	$(YACC) -v -d yaccgram.y
	sed 's/y.tab.c/yaccgram.c/g' y.tab.c > yaccgram.c
	mv y.tab.h yaccgram.h
	diff yaccgram.h cgram.h
endif

cexp.c: cexp.y
ifeq ($(YACCING),yes)
	$(YACC) -v cexp.y
	mv y.tab.c cexp.c
endif

cgram.h: cgram.c

strFill.h: proto.h strTdef.h c-xref.bs
	./c-xref.bs -task_regime_generate $(COMCFLAGS) proto.h \
		-str_fill -header \
		> tmpStrFill.h
	mv -f tmpStrFill.h strFill.h

strTdef.h: proto.h c-xref.bs
	echo > strTdef.h
	./c-xref.bs -task_regime_generate $(COMCFLAGS) proto.h \
		-typedefs -enum_name -header \
		> tmpStrTdef.h
	mv -f tmpStrTdef.h strTdef.h
	./c-xref.bs -task_regime_generate $(COMCFLAGS) proto.h \
		-typedefs -enum_name -header \
		> tmpStrTdef.h
	mv -f tmpStrTdef.h strTdef.h

enumTxt.c: proto.h strFill.h strTdef.h ../doc/_c-xrefrc c-xref.bs
	echo "#include \"stdinc.h\"" > enumTxt.c
	echo "#include \"proto.h\"  /*SBD*/" >> enumTxt.c
	./c-xref.bs -task_regime_generate $(COMCFLAGS) proto.h \
		-enum_name -body >> enumTxt.c

c-xref.bs:
	make ROOTDIR=$(ROOTDIR) -f Makefile.bs
	#echo "You need to bootstrap by copying a working c-xref to"
	#echo "c-xref.bs by doing:"
	#echo "  make bs"
	#echo "Worst case you need to back to a version that you can build"
	#echo "and do it after that. Then apply changes and re-make."

#########################################################################

c-xref: $(OBJS)
	$(CC) $(LDFLAGS) -o c-xref $(OBJS)

#########################################################################

clean:;
	make -C $(ROOTDIR)/lib/zlib clean
	rm -f $(OBJS) c-xref

#########################################################################

dependencies:;
	$(CC) -E -MM $(COMCFLAGS) *.c > Makefile.dependencies

#########################################################################
