#
# This makefile is included by Makefile and Makefile.platform makefiles.
# Do not use it directly
#
# NOTE that some files are generated by a bootstrap version of
# c-xref. If they need to be re-generated and c-xref.bs does not exist then
# c-xref.bs is built from existing sources using Makefile.bs.
#
# In particular strFill.g, strTdef.g and enumTxt.c are generated to catch
# what's relevant for this machine. Bootstrap versions of them,
# strFill.bs, strTdef.bs and enumTxt.bs should be used when
# bootstraping, so those files should be usable on all platforms.
#

include Makefile.objs

#########################################################################

all: $(ZLIB) c-xref

..always..:;

$(ROOTDIR)/lib/zlib/libz.a: ..always..
	make -C $(ROOTDIR)/lib/zlib libz.a

# Unless we need to modify the grammar, which incidentally includes
# both java and c++, we can use the already included .c-files instead
# of generating from yacc

# So we disable standard yacc to C rule so that we can compile without
# YACC which should happen on user sites. To run yacc on .y-files use
# 'make yacc' as defined in Makefile
%.c : %.y

cgram.c: cgram.y
ifeq ($(YACCING),yes)
	$(YACC) -v -d cgram.y
	mv y.output cy.output
	sed 's/y.tab.c/cgram.c/g' y.tab.c > cgram.c
	mv y.tab.h cgram.h
endif


javagram.c: javagram.y cgram.c
ifeq ($(YACCING),yes)
	$(YACC) -v -d javagram.y
	mv y.output jy.output
	sed 's/y.tab.c/javagram.c/g' y.tab.c > javagram.c
	mv y.tab.h javagram.h
	diff javagram.h cgram.h
endif

yaccgram.c: yaccgram.y cgram.c
ifeq ($(YACCING),yes)
	$(YACC) -v -d yaccgram.y
	sed 's/y.tab.c/yaccgram.c/g' y.tab.c > yaccgram.c
	mv y.tab.h yaccgram.h
	diff yaccgram.h cgram.h
endif

cexp.c: cexp.y
ifeq ($(YACCING),yes)
	$(YACC) -v cexp.y
	mv y.tab.c cexp.c
endif

cgram.h: cgram.c

#########################################################################
# Bootstrap a c-xref.bs using globally working sources
#
c-xref.bs:
	@echo "BOOTSTRAPPING..."
	make ROOTDIR=$(ROOTDIR) CFLAGS="$(CFLAGS) -DBOOTSTRAP" -f Makefile.bs


#########################################################################
# Once we have bootstrapped a c-xref.bs it can generate definitions
# which are dependent on compiler builtins or standard headers for
# the current environment (not actually dependent on c-xref.bs)
#
# .g = generated

compiler_defines.g: c-xref.bs
	echo | gcc -dM -E - > compiler_defines.g

strFill.g.h: proto.h strTdef.g.h compiler_defines.g c-xref.bs
	./c-xref.bs -task_regime_generate $(COMCFLAGS) -DGENERATION proto.h \
		-str_fill -header -no_stdop \
		> tmpStrFill.g.h
	if [ -e strFill.g.h ]; then mv -f strFill.g.h strFill.h.backup ; fi
	mv -f tmpStrFill.g.h strFill.g.h

strTdef.g.h: proto.h compiler_defines.g c-xref.bs
	./c-xref.bs -task_regime_generate $(COMCFLAGS) -DGENERATION proto.h \
		-typedefs -header -no_stdop \
		> tmpStrTdef.g.h
	if [ -e strTdef.g.h ]; then mv -f strTdef.g.h strTdef.h.backup ; fi
	mv -f tmpStrTdef.g.h strTdef.g.h

enumTxt.g.h: proto.h compiler_defines.g c-xref.bs
	./c-xref.bs -task_regime_generate $(COMCFLAGS) -DGENERATION proto.h \
		-enum_name -header -no_stdop \
		> tmpenumTxt.g.h
	if [ -e enumTxt.g.h ]; then mv -f enumTxt.g.h enumTxt.h.backup ; fi
	mv -f tmpenumTxt.g.h enumTxt.g.h

enumTxt.g.c: proto.h compiler_defines.g ../doc/_c-xrefrc c-xref.bs
	echo "#include \"stdinc.h\"" > tmpenumTxt.g.c
	echo "#include \"proto.h\"" >> tmpenumTxt.g.c
	./c-xref.bs -task_regime_generate $(COMCFLAGS) -DGENERATION proto.h \
		-enum_name -body -no_stdop >> tmpenumTxt.g.c
	if [ -e enumTxt.g.c ]; then mv -f enumTxt.g.c enumTxt.c.backup ; fi
	mv -f tmpenumTxt.g.c enumTxt.g.c

c-xref: $(OBJS)
	$(CC) $(LDFLAGS) -o c-xref $(OBJS) $(LIBS)

#########################################################################

clean:;
	make -C $(ROOTDIR)/lib/zlib clean
	-rm -f $(OBJS) c-xref

cleaner: clean
	-rm compiler_defines.g strFill.g.h strTdef.g.h enumTxt.g.[ch] c-xref.bs

#########################################################################

dependencies:;
	$(CC) -E -MM $(COMCFLAGS) *.c > Makefile.dependencies

#########################################################################

compare:
	-diff strFill.g.h strFill.h.backup
	-diff strTdef.g.h strTdef.h.backup
	-diff enumTxt.g.h enumTxt.h.backup
	-diff enumTxt.g.c enumTxt.c.backup
