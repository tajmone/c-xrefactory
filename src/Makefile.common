#
# This makefile is included by Makefile and Makefile.platform makefiles.
# Do not use it directly
#

debug: CFLAGS+=-DDEBUG -Og
debug: COVERAGE=--coverage
yydebug: CFLAGS+=-DYYDEBUG=1 -DDEBUG

prod debug yydebug: $(ZLIB) c-xref

include sources.mk

#########################################################################

..always..:;

$(ROOTDIR)/lib/zlib/libz.a: ..always..
	make -C $(ROOTDIR)/lib/zlib libz.a

# We generate parsers for C, Yacc, Java and C expressions
# Note the file prefix (-b) and symbol prefix (-p)

c_parser.tab.c c_parser.tab.h: c_parser.y $(YACC)
	$(YACC) -v -d -b c_parser -p cyy c_parser.y

java_parser.tab.c: java_parser.y $(YACC)
	$(YACC) -v -b java_parser -p javayy java_parser.y

yacc_parser.tab.c: yacc_parser.y $(YACC)
	$(YACC) -v -b yacc_parser -p yaccyy yacc_parser.y

cexp_parser.tab.c: cexp_parser.y $(YACC)
	$(YACC) -v -b cexp_parser -p cexpyy cexp_parser.y


#########################################################################
# Once we have a compiled c-xref we can regenerate the enum string
# representations .c and .h files too see if they differ
.PHONY: enumTxt
enumTxt:
	@./c-xref -task_regime_generate -enum_name -header -xrefrc .c-xrefrc proto.h \
		> tmp-$@.g.h ; \
	if ! diff $@.g.h tmp-$@.g.h ; then \
		mv -f $@.g.h $@.g.h.backup ; \
		mv -f tmp-$@.g.h $@.g.h ; \
		echo "$@.g.h: REGENERATED. Please rebuild to ensure compilation with new version." ; \
	else \
		echo "$@.g.h: no change" ; \
		rm tmp-$@.g.h ; \
	fi
	@./c-xref -task_regime_generate -enum_name -body -xrefrc .c-xrefrc proto.h \
		> tmp-$@.g.c ; \
	if ! diff $@.g.c tmp-$@.g.c ; then \
		mv -f $@.g.c $@.g.c.backup ; \
		mv -f tmp-$@.g.c $@.g.c ; \
		echo "$@.g.c: REGENERATED" ; \
	else \
		echo "$@.g.c: no change" ; \
		rm tmp-$@.g.c ; \
	fi

c-xref: .c-xrefrc $(OBJS)
	$(CC) $(LDFLAGS) -o c-xref $(OBJS) $(LIBS)
	@make enumTxt

.c-xrefrc: c-xrefrc.tpl
	@sed -e "s+CURDIR+$(CURDIR)+g" c-xrefrc.tpl > .c-xrefrc

#########################################################################

clean:;
	-make -C $(ROOTDIR)/lib/zlib clean
	-make -C unittests clean
	-rm -rf $(OBJDIR) c-xref
	-make -C ../tests clean

########################################################################
test: debug
	@echo "Only running quick tests for now - 'cd ../test; make all' to run all"
	$(MAKE) -C ../tests -j quick


unit:
	make -C unittests debug

coverage: COVERAGE=--coverage
coverage: clean test
	lcov -q --exclude \*.mock -exclude /usr -d . -c -o total.coverage
	genhtml -q -o ../coverage total.coverage

coverage-report: unit test
	@echo Doing the coverage reporting in the background
	@$(MAKE) the-actual-coverage-report &

LCOV=lcov -q --exclude '*.mock' --exclude '*.tab.c' --exclude '/usr/*'
the-actual-coverage-report:
	@$(LCOV) -d . -c -t unittests -o ../coverage/unittests.coverage
	@ls -1q ../tests/*.coverage | sed "s/^/-a /g" | xargs $(LCOV) -o ../coverage/total.coverage -a ../coverage/unittests.coverage
	@printf "\\r"
	@lcov -q --remove ../coverage/total.coverage '*.tab.c' '/usr/*' -o ../coverage/total.coverage
	genhtml -q -o ../coverage ../coverage/total.coverage
