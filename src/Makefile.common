#
# This makefile is included by Makefile and Makefile.platform makefiles.
# Do not use it directly
#
# NOTE that some files are generated by a bootstrap version of
# c-xref. If they need to be re-generated and c-xref.bs does not exist then
# c-xref.bs is built from existing sources using Makefile.bs.
#
# In particular strFill.g and enumTxt.c are generated to catch what's
# relevant for this machine. Bootstrap versions of them, strFill.bs
# and enumTxt.bs should be used when bootstraping, so those files
# should be usable on all platforms.
#

all: $(ZLIB) c-xref .c-xrefrc

include sources.mk

$(OBJDIR)/%.o: %.c | $(OBJDIR)
	$(CC) $(CFLAGS) $(OUTPUT_OPTION) -MMD -c $<

#########################################################################

..always..:;

$(OBJDIR)/%.o: %.c | $(OBJDIR)
	$(CC) $(CFLAGS) $(OUTPUT_OPTION) -MMD -c $<

$(ROOTDIR)/lib/zlib/libz.a: ..always..
	make -C $(ROOTDIR)/lib/zlib libz.a

# Unless we need to modify the grammar, which incidentally includes
# both java and c++, we can use the already included .c-files instead
# of generating from yacc

# So we disable standard yacc to C rule so that we can compile without
# YACC which should happen on user sites. To run yacc on .y-files use
# 'make yacc' as defined in Makefile
%.c : %.y

cgram.c: cgram.y $(YACC)
ifeq ($(YACCING),yes)
	$(YACC) -v -d cgram.y
	mv y.output cy.output
	sed 's/y.tab.c/cgram.c/g' y.tab.c > cgram.c
	mv y.tab.h cgram.h
endif


javagram.c: javagram.y cgram.c $(YACC)
ifeq ($(YACCING),yes)
	$(YACC) -v -d javagram.y
	mv y.output jy.output
	sed 's/y.tab.c/javagram.c/g' y.tab.c > javagram.c
	mv y.tab.h javagram.h
	diff javagram.h cgram.h
endif

yaccgram.c: yaccgram.y cgram.c $(YACC)
ifeq ($(YACCING),yes)
	$(YACC) -v -d yaccgram.y
	sed 's/y.tab.c/yaccgram.c/g' y.tab.c > yaccgram.c
	mv y.tab.h yaccgram.h
	diff yaccgram.h cgram.h
endif

cexp.c: cexp.y $(YACC)
ifeq ($(YACCING),yes)
	$(YACC) -v cexp.y
	mv y.tab.c cexp.c
endif

cgram.h: cgram.c

#########################################################################
# Bootstrap a c-xref.bs using globally working sources
#
c-xref.bs:
	@echo "BOOTSTRAPPING..."
	make ROOTDIR=$(ROOTDIR) -f Makefile.bs


#########################################################################
# Once we have bootstrapped a c-xref.bs it can generate definitions
# which are dependent on compiler builtins or standard headers for
# the current environment (not actually dependent on c-xref.bs)
#
# .g = generated, .bs = bootstrap version

compiler_defines.g: c-xref.bs Makefile.common
	@echo | gcc -dM -E - > tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		fi \
	else \
			mv -f tmp-$@ $@ ; \
	fi

# Generate structure filler functions
strFill.g.h: proto.h symtab.h compiler_defines.g c-xref.bs .c-xrefrc Makefile.common
	@./c-xref.bs -task_regime_generate $(CXREF_CFLAGS) -DGENERATION \
		-str_fill -header -xrefrc .c-xrefrc proto.h \
		> tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		fi \
	else \
			mv -f tmp-$@ $@ ; \
	fi

# Generate enum string representations header
enumTxt.g.h: proto.h compiler_defines.g c-xref.bs .c-xrefrc Makefile.common
	@./c-xref.bs -task_regime_generate $(CXREF_CFLAGS) -DGENERATION \
		-enum_name -header -xrefrc .c-xrefrc proto.h \
		> tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		fi \
	else \
			mv -f tmp-$@ $@ ; \
	fi

# Generate enum string representations
enumTxt.g.c: proto.h compiler_defines.g .c-xrefrc c-xref.bs Makefile.common
	@./c-xref.bs -task_regime_generate $(CXREF_CFLAGS) -DGENERATION \
		-enum_name -body -xrefrc .c-xrefrc proto.h \
		> tmp-$@
	@if [ -e $@ ]; then \
		if ! diff $@ tmp-$@ ; then \
			mv -f $@ $@.backup ; \
			mv -f tmp-$@ $@ ; \
			echo "$@: regenerated." ; \
		fi \
	else \
			mv -f tmp-$@ $@ ; \
	fi

c-xref: $(OBJS)
	$(CC) $(LDFLAGS) -o c-xref $(OBJS) $(LIBS)

.c-xrefrc: c-xrefrc.tpl
	@sed -e "s+CURDIR+$(CURDIR)+g" c-xrefrc.tpl > .c-xrefrc

#########################################################################

clean:;
	-make -C $(ROOTDIR)/lib/zlib clean
	-rm -rf $(OBJDIR)/*.o c-xref .c-xrefrc

cleaner: clean
	-rm -rf $(OBJDIR) compiler_defines.g strFill.g.h enumTxt.g.[ch] c-xref.bs

#########################################################################

test: unit c-xref
	$(MAKE) -C ../tests quick


unit:
	$(MAKE) -C unittests

# Special dependecies to force rebuild of c-xref.bs to generate needed files
$(SRCS) : strFill.g.h enumTxt.g.h enumTxt.g.c
