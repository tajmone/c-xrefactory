/* -*- c -*-*/
#include "jsemact.h"
#include <cgreen/mocks.h>

S_javaStat *s_javaStat;
S_javaStat s_initJavaStat;

void fill_nestedSpec(S_nestedSpec *nestedSpec, struct symbol *cl,
                     char membFlag, short unsigned  accFlags) {
    mock(nestedSpec, cl, membFlag, accFlags);
}

void javaCheckForPrimaryStart(Position *cpos, Position *pp) {
  mock(cpos, pp);
}

void javaCheckForPrimaryStartInNameList(S_idList *name, Position *pp) {
  mock(name, pp);
}

void javaCheckForStaticPrefixStart(Position *cpos, Position *bpos) {
  mock(cpos, bpos);
}

void javaCheckForStaticPrefixInNameList(S_idList *name, Position *pp) {
  mock(name, pp);
}

Position *javaGetNameStartingPosition(S_idList *name) {
  return (Position *) mock(name);
}

char *javaCreateComposedName(char *prefix, S_idList *className, int classNameSeparator, char *name, char *resBuff, int resBufSize) {
  return (char *) mock(prefix, className, classNameSeparator, name, resBuff, resBufSize);
}

int findTopLevelName(char *name, S_recFindStr *resRfs, Symbol **resMemb, int classif) {
  return (int) mock(name, resRfs, resMemb, classif);
}

int javaClassifySingleAmbigNameToTypeOrPack(S_idList *name, Symbol **str, int cxrefFlag) {
  return (int) mock(name, str, cxrefFlag);
}

void javaAddImportConstructionReference(Position *importPos, Position *pos, int usage) {
  mock(importPos, pos, usage);
}

int javaClassifyAmbiguousName(S_idList *name, S_recFindStr *rfs, Symbol **str, TypeModifier **expr, S_reference **oref, S_reference **rdtoref, int allowUselesFqtRefs, int classif, int usage) {
  return (int) mock(name, rfs, str, expr, oref, rdtoref, allowUselesFqtRefs, classif, usage);
}

S_reference *javaClassifyToTypeOrPackageName(S_idList *tname, int usage, Symbol **str, int allowUselesFqtRefs) {
  return (S_reference *) mock(tname, usage, str, allowUselesFqtRefs);
}

S_reference *javaClassifyToTypeName(S_idList *tname, int usage, Symbol **str, int allowUselesFqtRefs) {
  return (S_reference *) mock(tname, usage, str, allowUselesFqtRefs);
}

Symbol *javaQualifiedThis(S_idList *tname, S_id *thisid) {
  return (Symbol *) mock(tname, thisid);
}

void javaClassifyToPackageName(S_idList *id) {
  mock(id);
}

void javaClassifyToPackageNameAndAddRefs(S_idList *id, int usage) {
  mock(id, usage);
}

char *javaImportSymbolName_st(int file, int line, int coll) {
  return (char *) mock(file, line, coll);
}

TypeModifier *javaClassifyToExpressionName(S_idList *name, S_reference **oref) {
  return (TypeModifier *) mock(name, oref);
}

Symbol *javaTypeNameDefinition(S_idList *tname) {
  return (Symbol *) mock(tname);
}

void javaSetFieldLinkName(Symbol *d) {
  mock(d);
}

void javaAddPackageDefinition(S_idList *id) {
  mock(id);
}

Symbol *javaAddType(S_idList *class, Access access, Position *p) {
  return (Symbol *) mock(class, access, p);
}

Symbol *javaCreateNewMethod(char *name, Position *pos, int mem) {
  return (Symbol *) mock(name, pos, mem);
}

int javaTypeToString(TypeModifier *type, char *pp, int ppSize) {
  return (int) mock(type, pp, ppSize);
}

int javaIsYetInTheClass(Symbol *clas, char *lname, Symbol **eq) {
  return (int) mock(clas, lname, eq);
}

int javaSetFunctionLinkName(Symbol *clas, Symbol *decl, enum memoryClass mem) {
  return (int) mock(clas, decl, mem);
}

Symbol *javaGetFieldClass(char *fieldLinkName, char **fieldAdr) {
  return (Symbol *) mock(fieldLinkName, fieldAdr);
}

void javaAddNestedClassesAsTypeDefs(Symbol *cc, S_idList *oclassname, int accessFlags) {
  mock(cc, oclassname, accessFlags);
}

bool javaTypeFileExist(S_idList *name) {
  return (int) mock(name);
}

Symbol *javaTypeSymbolDefinition(S_idList *tname, int accessFlags, int addType) {
  return (Symbol *) mock(tname, accessFlags, addType);
}

Symbol *javaTypeSymbolUsage(S_idList *tname, int accessFlags) {
  return (Symbol *) mock(tname, accessFlags);
}

void javaReadSymbolFromSourceFileEnd(void) {
  mock();
}

void javaReadSymbolFromSourceFileInit(int sourceFileNum, S_jslTypeTab *typeTab) {
  mock(sourceFileNum, typeTab);
}

void javaReadSymbolsFromSourceFileNoFreeing(char *fname, char *asfname) {
  mock(fname, asfname);
}

void javaReadSymbolsFromSourceFile(char *fname) {
  mock(fname);
}

int javaLinkNameIsAnnonymousClass(char *linkname) {
  return (int) mock(linkname);
}

int javaLinkNameIsANestedClass(char *cname) {
  return (int) mock(cname);
}

int isANestedClass(Symbol *ss) {
  return (int) mock(ss);
}

void addSuperMethodCxReferences(int classIndex, Position *pos) {
  mock(classIndex, pos);
}

S_reference *addUselessFQTReference(int classIndex, Position *pos) {
  return (S_reference *) mock(classIndex, pos);
}

S_reference *addUnimportedTypeLongReference(int classIndex, Position *pos) {
  return (S_reference *) mock(classIndex, pos);
}

void addThisCxReferences(int classIndex, Position *pos) {
  mock(classIndex, pos);
}

void javaLoadClassSymbolsFromFile(Symbol *memb) {
  mock(memb);
}

Symbol *javaPrependDirectEnclosingInstanceArgument(Symbol *args) {
  return (Symbol *) mock(args);
}

void addMethodCxReferences(unsigned modif, Symbol *method, Symbol *clas) {
  mock(modif, method, clas);
}

Symbol *javaMethodHeader(unsigned modif, Symbol *type, Symbol *decl, int storage) {
  return (Symbol *) mock(modif, type, decl, storage);
}

void javaAddMethodParametersToSymTable(Symbol *method) {
  mock(method);
}

void javaMethodBodyBeginning(Symbol *method) {
  mock(method);
}

void javaMethodBodyEnding(Position *pos) {
  mock(pos);
}

void javaAddMapedTypeName(char *file, char *path, char *pack, Completions *c, void *vdirid, int *storage) {
  mock(file, path, pack, c, vdirid, storage);
}

Symbol *javaFQTypeSymbolDefinition(char *name, char *fqName) {
  return (Symbol *) mock(name, fqName);
}

TypeModifier *javaClassNameType(S_idList *typeName) {
  return (TypeModifier *) mock(typeName);
}

TypeModifier *javaNewAfterName(S_idList *name, S_id *id, S_idList *idl) {
  return (TypeModifier *) mock(name, id, idl);
}

int javaIsInnerAndCanGetUnnamedEnclosingInstance(Symbol *name, Symbol **outEi) {
  return (int) mock(name, outEi);
}

TypeModifier *javaNestedNewType(Symbol *expr, S_id *thenew, S_idList *idl) {
  return (TypeModifier *) mock(expr, thenew, idl);
}

TypeModifier *javaArrayFieldAccess(S_id *id) {
  return (TypeModifier *) mock(id);
}

TypeModifier *javaMethodInvocationN(S_idList *name, S_typeModifierList *args) {
  return (TypeModifier *) mock(name, args);
}

TypeModifier *javaMethodInvocationT(TypeModifier *tt, S_id *name, S_typeModifierList *args) {
  return (TypeModifier *) mock(tt, name, args);
}

TypeModifier *javaMethodInvocationS(S_id *super, S_id *name, S_typeModifierList *args) {
  return (TypeModifier *) mock(super, name, args);
}

TypeModifier *javaConstructorInvocation(Symbol *class, Position *pos, S_typeModifierList *args) {
  return (TypeModifier *) mock(class, pos, args);
}

S_extRecFindStr *javaCrErfsForMethodInvocationN(S_idList *name) {
  return (S_extRecFindStr *) mock(name);
}

S_extRecFindStr *javaCrErfsForMethodInvocationT(TypeModifier *tt, S_id *name) {
  return (S_extRecFindStr *) mock(tt, name);
}

S_extRecFindStr *javaCrErfsForMethodInvocationS(S_id *super, S_id *name) {
  return (S_extRecFindStr *) mock(super, name);
}

S_extRecFindStr *javaCrErfsForConstructorInvocation(Symbol *clas, Position *pos) {
  return (S_extRecFindStr *) mock(clas, pos);
}

int javaClassIsInCurrentPackage(Symbol *cl) {
  return (int) mock(cl);
}

int javaFqtNamesAreFromTheSamePackage(char *classFqName, char *fqname2) {
  return (int) mock(classFqName, fqname2);
}

int javaMethodApplicability(Symbol *memb, char *actArgs) {
  return (int) mock(memb, actArgs);
}

Symbol *javaGetSuperClass(Symbol *cc) {
  return (Symbol *) mock(cc);
}

Symbol *javaCurrentSuperClass(void) {
  return (Symbol *) mock();
}

TypeModifier *javaCheckNumeric(TypeModifier *tt) {
  return (TypeModifier *) mock(tt);
}

TypeModifier *javaNumericPromotion(TypeModifier *tt) {
  return (TypeModifier *) mock(tt);
}

TypeModifier *javaBinaryNumericPromotion(TypeModifier *t1, TypeModifier *t2) {
  return (TypeModifier *) mock(t1, t2);
}

TypeModifier *javaBitwiseLogicalPromotion(TypeModifier *t1, TypeModifier *t2) {
  return (TypeModifier *) mock(t1, t2);
}

TypeModifier *javaConditionalPromotion(TypeModifier *t1, TypeModifier *t2) {
  return (TypeModifier *) mock(t1, t2);
}

int javaIsStringType(TypeModifier *tt) {
  return (int) mock(tt);
}

void javaTypeDump(TypeModifier *tt) {
  mock(tt);
}

void javaAddJslReadedTopLevelClasses(S_jslTypeTab *typeTab) {
  mock(typeTab);
}

struct freeTrail *newAnonClassDefinitionBegin(S_id *interfName) {
  return (struct freeTrail *) mock(interfName);
}

void javaAddSuperNestedClassToSymbolTab(Symbol *cc) {
  mock(cc);
}

struct freeTrail *newClassDefinitionBegin(S_id *name, Access access, Symbol *anonymousInterface) {
    return (struct freeTrail *) mock(name, access, anonymousInterface);
}

void newClassDefinitionEnd(S_freeTrail *trail) {
  mock(trail);
}

void javaInitArrayObject(void) {
  mock();
}

void javaParsedSuperClass(Symbol *s) {
  mock(s);
}

void javaSetClassSourceInformation(char *package, S_id *cl) {
  mock(package, cl);
}

void javaCheckIfPackageDirectoryIsInClassOrSourcePath(char *dir) {
  mock(dir);
}
