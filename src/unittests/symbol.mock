/* -*- c -*-*/
#include "symbol.h"
#include <cgreen/mocks.h>

Symbol *newSymbol(char *name, char *linkName, struct position pos) {
    return NULL; // (S_symbol *)mock(name, linkName, pos);
Symbol *newSymbolAsCopyOf(Symbol *original) {
    return (Symbol*)mock(original);
}

void fillSymbol(Symbol *symbol, char *name, char *linkName, struct position pos) {
    // mock(symbol, name, linkName, pos);
}

Symbol *newSymbolAsKeyword(char *name, char *linkName, struct position pos, int keyWordVal) {
    return NULL; // (S_symbol *)mock(name, linkName, pos, keyWordVal);
}

Symbol *newSymbolAsType(char *name, char *linkName, struct position pos, struct typeModifier *type) {
    return NULL; // (S_symbol *)mock(name, linkName, pos, type);
}

void fillSymbolWithType(Symbol *symbol, char *name, char *linkName, struct position pos, struct typeModifier *type) {
    // mock(symbol, name, linkName, pos, type);
}

Symbol *newSymbolAsEnum(char *name, char *linkName, struct position pos, struct symbolList *enums) {
    return NULL; // (S_symbol *)mock(name, linkName, pos, enums);
}

Symbol *newSymbolAsLabel(char *name, char *linkName, struct position pos, int labelIndex) {
    return NULL; // (S_symbol *)mock(name, linkName, pos, labelIndex);
}

void fillSymbolWithLabel(Symbol *symbol, char *name, char *linkName, struct position pos, int labelIndex) {
    // mock(symbol, name, linkName, pos, labelIndex);
}

void fillSymbolWithStruct(Symbol *symbol, char *name, char *linkName, struct position pos, struct symStructSpec *structSpec) {
    // mock(symbol, name, linkName, pos, structSpec);
}

void fillSymbolBits(S_symbolBits *bits, Access access, Type symType, Storage storage) {
    mock(bits, access, symType, storage);
}
