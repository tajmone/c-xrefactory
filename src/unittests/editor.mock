/* -*- c -*-*/
#include "editor.h"
#include <cgreen/mocks.h>

void editorInit(void) {
  mock();
}

int statb(char *path, struct stat *statbuf) {
  return (int) mock(path, statbuf);
}

bool editorMarkerLess(EditorMarker *m1, EditorMarker *m2) {
  return (int) mock(m1, m2);
}

bool editorMarkerLessOrEq(EditorMarker *m1, EditorMarker *m2) {
  return (int) mock(m1, m2);
}

bool editorMarkerGreater(EditorMarker *m1, EditorMarker *m2) {
  return (int) mock(m1, m2);
}

bool editorMarkerGreaterOrEq(EditorMarker *m1, EditorMarker *m2) {
  return (int) mock(m1, m2);
}

bool editorMarkerListLess(S_editorMarkerList *l1, S_editorMarkerList *l2) {
  return (int) mock(l1, l2);
}

bool editorRegionListLess(S_editorRegionList *l1, S_editorRegionList *l2) {
  return (int) mock(l1, l2);
}

EditorBuffer *editorOpenBufferNoFileLoad(char *name, char *fileName) {
  return (EditorBuffer *) mock(name, fileName);
}

EditorBuffer *editorGetOpenedBuffer(char *name) {
  return (EditorBuffer *) mock(name);
}

EditorBuffer *editorGetOpenedAndLoadedBuffer(char *name) {
  return (EditorBuffer *) mock(name);
}

EditorBuffer *editorFindFile(char *name) {
  return (EditorBuffer *) mock(name);
}

EditorBuffer *editorFindFileCreate(char *name) {
  return (EditorBuffer *) mock(name);
}

EditorMarker *editorCrNewMarkerForPosition(Position *pos) {
  return (EditorMarker *) mock(pos);
}

S_editorMarkerList *editorReferencesToMarkers(Reference *refs, int (*filter)(Reference *, void *), void *filterParam) {
  return (S_editorMarkerList *) mock(refs, filter, filterParam);
}

Reference *editorMarkersToReferences(S_editorMarkerList **mms) {
  return (Reference *) mock(mms);
}

void editorRenameBuffer(EditorBuffer *buff, char *newName, S_editorUndo **undo) {
  mock(buff, newName, undo);
}

void editorReplaceString(EditorBuffer *buff, int position, int delsize, char *str, int strlength, S_editorUndo **undo) {
  mock(buff, position, delsize, str, strlength, undo);
}

void editorMoveBlock(EditorMarker *dest, EditorMarker *src, int size, S_editorUndo **undo) {
  mock(dest, src, size, undo);
}

void editorDumpBuffer(EditorBuffer *buff) {
  mock(buff);
}

void editorDumpBuffers(void) {
  mock();
}

void editorDumpMarker(EditorMarker *mm) {
  mock(mm);
}

void editorDumpMarkerList(S_editorMarkerList *mml) {
  mock(mml);
}

void editorDumpRegionList(S_editorRegionList *mml) {
  mock(mml);
}

void editorQuasiSaveModifiedBuffers(void) {
  mock();
}

void editorLoadAllOpenedBufferFiles(void) {
  mock();
}

EditorMarker *editorCrNewMarker(EditorBuffer *buff, int offset) {
  return (EditorMarker *) mock(buff, offset);
}

EditorMarker *editorDuplicateMarker(EditorMarker *mm) {
  return (EditorMarker *) mock(mm);
}

int editorCountLinesBetweenMarkers(EditorMarker *m1, EditorMarker *m2) {
  return (int) mock(m1, m2);
}

int editorRunWithMarkerUntil(EditorMarker *m, int (*until)(int), int step) {
  return (int) mock(m, until, step);
}

int editorMoveMarkerToNewline(EditorMarker *m, int direction) {
  return (int) mock(m, direction);
}

int editorMoveMarkerToNonBlank(EditorMarker *m, int direction) {
  return (int) mock(m, direction);
}

int editorMoveMarkerBeyondIdentifier(EditorMarker *m, int direction) {
  return (int) mock(m, direction);
}

int editorMoveMarkerToNonBlankOrNewline(EditorMarker *m, int direction) {
  return (int) mock(m, direction);
}

void editorRemoveBlanks(EditorMarker *mm, int direction, S_editorUndo **undo) {
  mock(mm, direction, undo);
}

void editorDumpUndoList(S_editorUndo *uu) {
  mock(uu);
}

void editorMoveMarkerToLineCol(EditorMarker *m, int line, int col) {
  mock(m, line, col);
}

void editorMarkersDifferences(S_editorMarkerList **list1, S_editorMarkerList **list2, S_editorMarkerList **diff1, S_editorMarkerList **diff2) {
  mock(list1, list2, diff1, diff2);
}

void editorFreeMarker(EditorMarker *marker) {
  mock(marker);
}

void editorFreeMarkerListNotMarkers(S_editorMarkerList *occs) {
  mock(occs);
}

void editorFreeMarkersAndRegionList(S_editorRegionList *occs) {
  mock(occs);
}

void editorFreeRegionListNotMarkers(S_editorRegionList *occs) {
  mock(occs);
}

void editorSortRegionsAndRemoveOverlaps(S_editorRegionList **regions) {
  mock(regions);
}

void editorSplitMarkersWithRespectToRegions(S_editorMarkerList **inMarkers, S_editorRegionList **inRegions, S_editorMarkerList **outInsiders, S_editorMarkerList **outOutsiders) {
  mock(inMarkers, inRegions, outInsiders, outOutsiders);
}

void editorRestrictMarkersToRegions(S_editorMarkerList **mm, S_editorRegionList **regions) {
  mock(mm, regions);
}

EditorMarker *editorCrMarkerForBufferBegin(EditorBuffer *buffer) {
  return (EditorMarker *) mock(buffer);
}

EditorMarker *editorCrMarkerForBufferEnd(EditorBuffer *buffer) {
  return (EditorMarker *) mock(buffer);
}

S_editorRegionList *editorWholeBufferRegion(EditorBuffer *buffer) {
  return (S_editorRegionList *) mock(buffer);
}

void editorFreeMarkersAndMarkerList(S_editorMarkerList *occs) {
  mock(occs);
}

int editorMapOnNonexistantFiles(char *dirname, void (*fun)(char *file, char *a1, char *a2, Completions *a3, void *a4, int *a5), int deep, char *a1, char *a2, Completions *a3, void *a4, int *a5) {
  return (int) mock(dirname, fun, deep, a1, a2, a3, a4, a5);
}

void editorCloseBufferIfClosable(char *name) {
  mock(name);
}

void editorCloseAllBuffersIfClosable(void) {
  mock();
}

void editorCloseAllBuffers(void) {
  mock();
}
