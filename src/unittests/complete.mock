/* -*- c -*-*/
#include "../complete.h"
#include <cgreen/mocks.h>

void initCompletions(S_completions *completions, int length, S_position position) {
    mock(completions, length, (intptr_t)&position);
}

void processName(char *name, S_cline *t, int orderFlag, void *c) {
  mock(name, t, orderFlag, c);
}

void completeForSpecial1(S_completions *c) {
  mock(c);
}

void completeForSpecial2(S_completions *c) {
  mock(c);
}

void completeUpFunProfile(S_completions *c) {
  mock(c);
}

void completeTypes(S_completions *c) {
  mock(c);
}

void completeStructs(S_completions *c) {
  mock(c);
}

void completeRecNames(S_completions *c) {
  mock(c);
}

void completeEnums(S_completions *c) {
  mock(c);
}

void completeLabels(S_completions *c) {
  mock(c);
}

void completeMacros(S_completions *c) {
  mock(c);
}

void completeOthers(S_completions *c) {
  mock(c);
}

void javaCompleteTypeSingleName(S_completions *c) {
  mock(c);
}

void javaHintImportFqt(S_completions *c) {
  mock(c);
}

void javaHintVariableName(S_completions *c) {
  mock(c);
}

void javaHintCompleteNonImportedTypes(S_completions *c) {
  mock(c);
}

void javaHintCompleteMethodParameters(S_completions *c) {
  mock(c);
}

void javaCompleteTypeCompName(S_completions *c) {
  mock(c);
}

void javaCompleteThisPackageName(S_completions *c) {
  mock(c);
}

void javaCompletePackageSingleName(S_completions *c) {
  mock(c);
}

void javaCompleteExprSingleName(S_completions *c) {
  mock(c);
}

void javaCompleteUpMethodSingleName(S_completions *c) {
  mock(c);
}

void javaCompleteFullInheritedMethodHeader(S_completions *c) {
  mock(c);
}

void javaCompletePackageCompName(S_completions *c) {
  mock(c);
}

void javaCompleteExprCompName(S_completions *c) {
  mock(c);
}

void javaCompleteMethodCompName(S_completions *c) {
  mock(c);
}

void javaCompleteHintForConstructSingleName(S_completions *c) {
  mock(c);
}

void javaCompleteConstructSingleName(S_completions *c) {
  mock(c);
}

void javaCompleteConstructCompName(S_completions *c) {
  mock(c);
}

void javaCompleteConstructNestNameName(S_completions *c) {
  mock(c);
}

void javaCompleteConstructNestPrimName(S_completions *c) {
  mock(c);
}

void javaCompleteStrRecordPrimary(S_completions *c) {
  mock(c);
}

void javaCompleteStrRecordSuper(S_completions *c) {
  mock(c);
}

void javaCompleteStrRecordQualifiedSuper(S_completions *c) {
  mock(c);
}

void javaCompleteClassDefinitionNameSpecial(S_completions *c) {
  mock(c);
}

void javaCompleteClassDefinitionName(S_completions *c) {
  mock(c);
}

void javaCompleteThisConstructor(S_completions *c) {
  mock(c);
}

void javaCompleteSuperConstructor(S_completions *c) {
  mock(c);
}

void javaCompleteSuperNestedConstructor(S_completions *c) {
  mock(c);
}

void completeYaccLexem(S_completions *c) {
  mock(c);
}

char *javaGetShortClassName(char *inn) {
  return (char *) mock(inn);
}

void olCompletionListInit(S_position *originalPos) {
  mock(originalPos);
}

void formatOutputLine(char *tt, int startingColumn) {
  mock(tt, startingColumn);
}

void printCompletionsList(int noFocus) {
  mock(noFocus);
}

void printCompletions(S_completions *c) {
  mock(c);
}
