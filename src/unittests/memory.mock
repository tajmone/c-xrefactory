/* -*- c -*-*/
#include "memory.h"
#include <cgreen/mocks.h>

Memory *cxMemory = NULL;
S_topBlock *s_topBlock;

char tmpWorkMemory[SIZE_tmpWorkMemory];
int tmpWorkMemoryi = 0;

char ftMemory[SIZE_ftMemory];
int ftMemoryi = 0;

char tmpMemory[SIZE_TMP_MEM];


void memoryResize(void) {
  mock();
}

bool optionsOverflowHandler(int n) {
  return (int) mock(n);
}

void stackMemoryInit(void) {
  mock();
}

void addToTrail(void (*action)(void *), void *p) {
  mock(action, p);
}

void removeFromTrailUntil(S_freeTrail *untilP) {
  mock(untilP);
}

void *stackMemoryPush(void *p, int size) {
  return (void *) mock(p, size);
}

char *stackMemoryPushString(char *s) {
  return (char *) mock(s);
}

void stackMemoryBlockStart(void) {
  mock();
}

void stackMemoryBlockFree(void) {
  mock();
}

void stackMemoryDump(void) {
  mock();
}

/* Actual function (copies) down here */
void initMemory(Memory *memory, bool (*overflowHandler)(int n), int size) {
    memory->overflowHandler = overflowHandler;
    memory->index = 0;
    memory->size = size;
    memory->b = 0;
}

bool cxMemoryOverflowHandler(int n) {
    int ofactor,factor,oldsize, newsize;
    Memory *oldcxMemory;

    if (cxMemory!=NULL) {
        oldsize = cxMemory->size;
    } else {
        oldsize = 0;
    }

    ofactor = oldsize / CX_MEMORY_CHUNK_SIZE;
    factor = ((n>1)?(n-1):0)/CX_MEMORY_CHUNK_SIZE + 1; // 1 no patience to wait ;
    //& if (options.cxMemoryFactor>=1) factor *= options.cxMemoryFactor;
    factor += ofactor;
    if (ofactor*2 > factor) factor = ofactor*2;
    newsize = factor * CX_MEMORY_CHUNK_SIZE;
    oldcxMemory = cxMemory;
    if (oldcxMemory!=NULL) free(oldcxMemory);
    cxMemory = malloc(newsize + sizeof(Memory));
    if (cxMemory!=NULL) {
        initMemory(cxMemory, cxMemoryOverflowHandler, newsize);
    }

    return(cxMemory!=NULL);
}

/* No mock, just allocate memory as requested */
void *stackMemoryAlloc(int size) {
  return (void *)malloc(size);
}

int nestingLevel(void) {
    return mock();
}

bool memoryFromPreviousBlock(void *address) {
    return (bool)mock(address);
}
