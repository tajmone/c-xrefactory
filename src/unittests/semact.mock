/* -*- c -*-*/
#include "../semact.h"
#include <cgreen/mocks.h>

void unpackPointers(Symbol *pp) {
  mock(pp);
}

int displayingErrorMessages(void) {
  return (int) mock();
}

void deleteSymDef(void *p) {
  mock(p);
}

void addSymbol(Symbol *pp, S_symTab *tab) {
  mock(pp, tab);
}

void recFindPush(Symbol *sym, S_recFindStr *rfs) {
  mock(sym, rfs);
}

S_recFindStr *iniFind(Symbol *s, S_recFindStr *rfs) {
  return (S_recFindStr *) mock(s, rfs);
}

int javaOuterClassAccessible(Symbol *cl) {
  return (int) mock(cl);
}

int javaRecordAccessible(S_recFindStr *rfs, Symbol *applcl, Symbol *funcl, Symbol *rec, unsigned recAccessFlags) {
  return (int) mock(rfs, applcl, funcl, rec, recAccessFlags);
}

int javaRecordVisibleAndAccessible(S_recFindStr *rfs, Symbol *applCl, Symbol *funCl, Symbol *r) {
  return (int) mock(rfs, applCl, funCl, r);
}

int javaGetMinimalAccessibility(S_recFindStr *rfs, Symbol *r) {
  return (int) mock(rfs, r);
}

int findStrRecordSym(S_recFindStr *ss, char *recname, Symbol **res, int javaClassif, int accessCheck, int visibilityCheck) {
  return (int) mock(ss, recname, res, javaClassif, accessCheck, visibilityCheck);
}

Symbol *addNewSymbolDef(Symbol *p, unsigned storage, S_symTab *tab, int usage) {
  return (Symbol *) mock(p, storage, tab, usage);
}

Symbol *addNewCopyOfSymbolDef(Symbol *def, unsigned defaultStorage) {
  return (Symbol *) mock(def, defaultStorage);
}

Symbol *addNewDeclaration(Symbol *btype, Symbol *decl, S_idIdentList *idl, unsigned storage, S_symTab *tab) {
  return (Symbol *) mock(btype, decl, idl, storage, tab);
}

int styyerror(char *s) {
  return (int) mock(s);
}

int styyErrorRecovery(void) {
  return (int) mock();
}

void setToNull(void *p) {
  mock(p);
}

Symbol *typeSpecifier1(unsigned t) {
  return (Symbol *) mock(t);
}

void declTypeSpecifier1(Symbol *d, unsigned t) {
  mock(d, t);
}

Symbol *typeSpecifier2(S_typeModifiers *t) {
  return (Symbol *) mock(t);
}

void declTypeSpecifier2(Symbol *d, S_typeModifiers *t) {
  mock(d, t);
}

void declTypeSpecifier21(S_typeModifiers *t, Symbol *d) {
  mock(t, d);
}

S_typeModifiers *appendComposedType(S_typeModifiers **d, unsigned t) {
  return (S_typeModifiers *) mock(d, t);
}

S_typeModifiers *prependComposedType(S_typeModifiers *d, unsigned t) {
  return (S_typeModifiers *) mock(d, t);
}

void completeDeclarator(Symbol *t, Symbol *d) {
  mock(t, d);
}

void addFunctionParameterToSymTable(Symbol *function, Symbol *p, int i, S_symTab *tab) {
  mock(function, p, i, tab);
}

S_typeModifiers *crSimpleTypeModifier(unsigned t) {
  return (S_typeModifiers *) mock(t);
}

SymbolList *createDefinitionList(Symbol *symbol) {
  return (SymbolList *) mock(symbol);
}

Symbol *createSimpleDefinition(unsigned storage, unsigned t, S_idIdent *id) {
  return (Symbol *) mock(storage, t, id);
}

int findStrRecord(Symbol *s, char *recname, Symbol **res, int javaClassif) {
  return (int) mock(s, recname, res, javaClassif);
}

S_reference *findStrRecordFromSymbol(Symbol *str, S_idIdent *record, Symbol **res, int javaClassif, S_idIdent *super) {
  return (S_reference *) mock(str, record, res, javaClassif, super);
}

S_reference *findStrRecordFromType(S_typeModifiers *str, S_idIdent *record, Symbol **res, int javaClassif) {
  return (S_reference *) mock(str, record, res, javaClassif);
}

int mergeArguments(Symbol *id, Symbol *ty) {
  return (int) mock(id, ty);
}

S_typeModifiers *simpleStrUnionSpecifier(S_idIdent *typeName, S_idIdent *id, int usage) {
  return (S_typeModifiers *) mock(typeName, id, usage);
}

S_typeModifiers *crNewAnnonymeStrUnion(S_idIdent *typeName) {
  return (S_typeModifiers *) mock(typeName);
}

void specializeStrUnionDef(Symbol *sd, Symbol *rec) {
  mock(sd, rec);
}

S_typeModifiers *simpleEnumSpecifier(S_idIdent *id, int usage) {
  return (S_typeModifiers *) mock(id, usage);
}

void setGlobalFileDepNames(char *iname, Symbol *pp, int memory) {
  mock(iname, pp, memory);
}

S_typeModifiers *createNewAnonymousEnum(SymbolList *enums) {
  return (S_typeModifiers *) mock(enums);
}

void appendPositionToList(S_positionList **list, S_position *pos) {
  mock(list, pos);
}

void setParamPositionForFunctionWithoutParams(S_position *lpar) {
  mock(lpar);
}

void setParamPositionForParameter0(S_position *lpar) {
  mock(lpar);
}

void setParamPositionForParameterBeyondRange(S_position *rpar) {
  mock(rpar);
}

Symbol *crEmptyField(void) {
  return (Symbol *) mock();
}

void handleDeclaratorParamPositions(Symbol *decl, S_position *lpar, S_positionList *commas, S_position *rpar, int hasParam) {
  mock(decl, lpar, commas, rpar, hasParam);
}

void handleInvocationParamPositions(S_reference *ref, S_position *lpar, S_positionList *commas, S_position *rpar, int hasParam) {
  mock(ref, lpar, commas, rpar, hasParam);
}

void javaHandleDeclaratorParamPositions(S_position *sym, S_position *lpar, S_positionList *commas, S_position *rpar) {
  mock(sym, lpar, commas, rpar);
}

void setLocalVariableLinkName(struct symbol *p) {
  mock(p);
}

void labelReference(S_idIdent *id, int usage) {
  mock(id, usage);
}
