This is install instructions for portable source distribution of
C-xrefactory.

**********************************************************************
*    Auto Create Xrefactory Distribution                             *
**********************************************************************

1.) In order to create the distribution, goto the directory containing
this file and type:

        sh ./CreateXrefDistribution

If everything is going all right, you will find the
'c-xref' directory along the original 'c-xrefactory' directory.  This
directory contains a working distribution containing all files needed
to install and run Xrefactory.  Go there and follow instructions
written there in the README or INSTALL file.

2.) If you just want a c-xrefactory installation for yourself you can
use the el-get (see https://github.com/dimitri/el-get) recipe provided
in 'c-xrefactory.rcp'. Copy it to your <emacsdir>/el-get-user-recipes
directory and say "M-x el-get-install" "c-xrefactory".

3.) To just compile do "make" which will produce a new 'c-xref' program


**********************************************************************
*      Manual Create Xrefactory Distribution                         *
**********************************************************************

In following text, let XREFDIR be the directory containing this file.

1.)  First compile xref sources.  They are stored in XREFDIR/src
directory.  If you have 'make' or 'gmake' installed on your computer
then invoke it in the 'src' directory. This will produce an executable
task (named c-xref or c-xref.exe, ...). You can check it from command
line by invoking it with -about option:

    c-xref -about

Now you need to install Xrefactory under your environment:

2.)  Emacs/XEmacs installation: Copy files XREFDIR/env/emacs/c-xref.el
and XREFDIR/env/emacs/c-xrefactory.el to directory containing your
Emacs lisp code. Then add line:

    (load "c-xrefactory")

to your ~/.emacs file.  Finally, modify your PATH variable (or
equivalent on your system), so that command 'c-xref' invokes the
executable c-xref compiled in step 1.



**********************************************************************
*      Developing Xrefactory                                         *
**********************************************************************


1.) If you actively develop c-xref and modify sources, you will need a
working copy of c-xref task in xref.bs file (because c-xref is partially
bootstrapped).  So before doing your first source file modification,
do the following!

  make
  make bs

then, you can modify source files and rebuild simply by make.

2.) You will need to build Berkeley yacc, which is stored in byacc-1.9
directory.

NOTE: The parser in byacc-1.9 is fetched from
ftp://ftp.cs.berkeley.edu/pub/4bsd/byacc.1.9.tar.Z (linked to from
e.g. http://invisible-island.net/byacc/byacc.html under "Related
links"), but with a few patches (restored from the byacc from the
official xrefactory.com sources):

 - support for RECURSIVE (needed by the java parser)
 - 'lastyystate' used in the semantic rules (purpose unknown at this point)

Patches are in byacc.1.9.patch.txt.

Since that source is old it has been updated to modern C and the
source is included in the repo so there should be nothing to do.

3.) You will also need to update file dependeces from time to time by
the command:

  make dependencies

4.) To compile xref with debugging options use:

  make -f Makefile.development
